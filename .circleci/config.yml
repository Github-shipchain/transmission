version: 2.1
orbs:
  deploy: shipchain/ecs-deploy@1
jobs:
  build:
    docker:
      - image: circleci/python:3.6.8
        user: root
    environment:
      ROLE: circleci
    working_directory: ~/repo
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: true
      - restore_cache:
          keys:
            - virtualenv-alpine-cache-v2-{{ checksum "poetry.lock" }}
            - virtualenv-alpine-cache-v2
      - run:
          name: Build Docker images
          command: |
            docker build --target test   --tag transmission-django-test .
            docker build --target deploy --tag transmission-django --cache-from transmission-django-test .
      - run:
          name: Start compose services
          command: |
            bin/dc up -d
      - run:
          name: Check for valid poetry.lock
          command: |
            bin/dc exec -T runserver /bin/bash -c '! poetry install --dry-run | grep "Warning: The lock file is not up to date"'
      - run:
          name: Package safety check
          command: |
            bin/dc exec -T runserver safety check
      - run:
          name: PEP8 Lint check
          command: |
            bin/dc exec -T runserver prospector -o pylint
      - run:
          name: Bandit SAST tool
          command: |
            bin/dc exec -T runserver bandit -r apps
      - run:
          name: Run unit tests and coverage report
          command: |
            bin/dc exec -T runserver pytest --junitxml=test-results/pytest/results-pe.xml --cov=apps --cov-config=.coveragerc --cov-report= tests/profiles-enabled
            bin/dc exec -T runserver pytest --junitxml=test-results/pytest/results-pd.xml --cov=apps --cov-config=.coveragerc --cov-report=html:test-results/coverage.html --cov-append --ds=conf.test_settings_profiles_disabled tests/profiles-disabled
      - run:
          name: Copy artifacts from Docker
          command: |
            docker cp $(bin/dc ps -q runserver):/app/test-results test-results
      - run:
          name: Merge junit results
          command: |
            pip install junitparser==1.3.2
            junitparser merge test-results/pytest/results-pe.xml test-results/pytest/results-pd.xml test-results/pytest/results.xml
            rm test-results/pytest/results-*.xml
      - store_test_results:
          path: test-results

      - store_artifacts:
          path: test-results
      - run:
          name: Copy virtualenv cache from Docker
          command: |
            docker cp $(bin/dc ps -q runserver):/app/.virtualenv/. .virtualenv
      - save_cache:
          key: virtualenv-alpine-cache-v2-{{ checksum "poetry.lock" }}
          paths:
            - .virtualenv
      - run:
          name: Save docker image
          command: |
            mkdir -p docker-cache
            docker save -o docker-cache/built-image.tar transmission-django
      - persist_to_workspace:
          root: docker-cache
          paths:
            - built-image.tar

  openapi-validation:
    docker:
      - image: circleci/node:10
    steps:
      - checkout
      - run: npx swagger-cli validate ./apps/schema/static/schema/swagger.yaml

  speccy:
    docker:
      - image: circleci/node:10
    steps:
      - checkout
      - run: npx speccy lint ./apps/schema/static/schema/swagger.yaml -c ./apps/schema/static/schema/speccy.yaml

  spellchecker:
    docker:
      - image: circleci/node:10
        user: root
    working_directory: ~/repo
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: true
      - run:
          name: Swagger spell check
          command: |
            docker run --name spellcheck -d --entrypoint '' shipchain/openapi-spellcheck sh -c 'while sleep 3600; do :; done'
            docker cp $(pwd)/apps/schema/static/schema spellcheck:/schema
            docker exec spellcheck ./spellchecker_entrypoint.sh schema/swagger.yaml schema/dictionary.txt

  push-to-ecr:
    docker:
      - image: docker:stable-git
    steps:
      - deploy/push:
          image: transmission-django
  deploy-to-dev:
    docker:
      - image: docker:stable-git
    steps:
      - deploy/promote:
          app: transmission
          env: DEV
          image: transmission-django
  deploy-to-stage:
    docker:
      - image: docker:stable-git
    steps:
      - deploy/promote:
          app: transmission
          env: STAGE
          image: transmission-django
  deploy-to-demo:
    docker:
      - image: docker:stable-git
    steps:
      - deploy/promote:
          app: transmission
          env: DEMO
          image: transmission-django
  deploy-to-prod:
    docker:
      - image: docker:stable-git
    steps:
      - deploy/promote:
          app: transmission
          env: PROD
          image: transmission-django
workflows:
  version: 2
  build-and-deploy:
    jobs:
      - build
      - openapi-validation
      - speccy
      - spellchecker
      - push-to-ecr:
          filters:
            branches:
              only: master
          requires:
            - build
      - deploy-to-dev:
          filters:
            branches:
              only: master
          requires:
            - push-to-ecr
      - hold-deploy-stage:
          filters:
            branches:
              only: master
          type: approval
          requires:
            - push-to-ecr
      - deploy-to-stage:
          filters:
            branches:
              only: master
          requires:
            - hold-deploy-stage
      - hold-deploy-demo:
          filters:
            branches:
              only: master
          type: approval
          requires:
            - deploy-to-dev
      - deploy-to-demo:
          filters:
            branches:
              only: master
          requires:
            - hold-deploy-demo
      - hold-deploy-prod:
          filters:
            branches:
              only: master
          type: approval
          requires:
            - deploy-to-stage
      - deploy-to-prod:
          filters:
            branches:
              only: master
          requires:
            - hold-deploy-prod
